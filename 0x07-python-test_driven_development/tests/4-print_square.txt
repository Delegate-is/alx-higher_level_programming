
Deploying and using 5-text_indentation.py
=========================================

The module is defining a function ``def print_square(size):`` that prints a square.

Using the function
------------------

The square is printed with the character ``#``
Parameter:
    @size: represents the length of the square.

::

    >>> print_square = __import__('4-print_square').print_square
    >>> print_square(1)
    #

::

    >>> print_square(10)
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########

::

    >>> print_square(4)
    ####
    ####
    ####
    ####

The function returns nothing when ``size`` of the square is zero.

::

    >>> print_square(0)

Sizes which are Invalid
=======================

It is a must that the parameter ``size`` is an integer. Otherwise,
raise  a TypeError.

::

    >>> print_square("non integer")
    Traceback (most recent call last):
    TypeError: size must be an integer

::

    >>> print_square(4.7)
    Traceback (most recent call last):
    TypeError: size must be an integer

::

    >>> print_square(None)
    Traceback (most recent call last):
    TypeError: size must be an integer

Raise ValueError if ``size`` is less than 0.

::

    >>> print_square(-1)
    Traceback (most recent call last):
    TypeError: size must be >= 0

::

    >>> print_square(-3.5)
    Traceback (most recent call last):
    ValueError: size must be >= 0

There must be at least one parameter named.

::

    >>>  print_square()
    Traceback (most recent call last):
    TypeError: required argument parameter
