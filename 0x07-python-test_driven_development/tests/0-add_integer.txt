Deploying and using 0-add_integer.py
===================================

The module is defining a function that adds 2 integers ``def add_integer(a, b=98)``

Using ``add_integer``
---------------------

``add_integer(....)``` will pass two variable arguments and return the addition.
Numbers value is equivalent to using of the ``+`` operator.

::

        >>> add_integer = __import__('0-add_integer').add_integer
        >>> add_integer(2, 3)
        5

::

        >>> add_integer(2, -3)
        -1

``add_integer``` function works with floats still.

::

        >>> add_integer(2.0, 3.0)
        5

Function casts floats into integers before executing.

::

        >>> add_integer(2.9, 0.2)
        2

::

        >>> add_integer(-2.9, -0.2)
        -2

Adding and combing floats and integers.

::

        >>> add_integer(2.3, -3)
        -1

Second optional argument is 98 by default.

::

        >>> add_integer(2)
        100

Not Numbers
===========
Both arguments expected by ``add_integer()``` to be either integers or floats.
TypeError is raised if either of the arguments is non-float or non-integer.

::

        >>> add_integer("min", 1)
        Traceback (most recent call last):
        TypeError: a must be an integer

::

        >>> add_integer(4, "max")
        Traceback (most recent call last):
        TypeError: b must be an integer

::

        >>> add_integer(None)
        Traceback (most recent call last):
        TypeError: a must be an integer

::

        >>> add_integer(7, None)
        Traceback (most recent call last):
        TypeError: b must be an integer

Upon occurrence that both arguments are non-floats and non-integers,
TypeError returns only for the first argument.

::

        >>> add_integer("zoom", "here")
        Traceback (most recent call last):
        TypeError: a must be an integer

Function fails if infinity is provided.

::

        >>> add_integer(float('inf'))
        Traceback (most recent call last):
        OverflowError: cannot convert float infinity to integer

::

        >>> add_integer(5, float('inf'))
        Traceback (most recent call last):
        OverflowError: cannot convert float infinity to integer

Not a Number

::

        >>> add_integer(float('NaN'))
        Traceback (most recent call last):
        ValueError: cannot convert float NaN to integer

::

        >>> add_integer(5, float('NaN'))
        Traceback (most recent call last):
        ValueError: cannot convert float NaN to integer
